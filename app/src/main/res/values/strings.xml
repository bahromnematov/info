<resources>
    <string name="app_name">Dasturlash tillari</string>
    <style name="AppTheme">
        <item name="android:fontFamily">@raw/style</item>
    </style>
    <string name="cplusplus">C++</string>
    <string name="java">JAVA</string>
    <string name="python">PYTHON</string>
    <string name="javaScript">JAVASCRIPT</string>
    <string name="c">C#</string>
    <string name="kotlin">KOTLIN</string>
    <string name="flutter">FLUTTER</string>
    <string name="go">GO</string>

    <string name="suzuki">SUZUKI GCX R</string>
    <string name="suzukiInfo">2016-yil oxirida EICMA - da jurnalistlarga taqdim etilgan 2017-yilgi model 2009-yilda dvigatelning so‘nggi yangilanishidan keyin birinchi bo‘lib sezilarli darajada qayta ishlangan dvigatelga ega edi. Ushbu yangi dvigatel yuqori aylanish chegarasiga ega va tebranishlarni bostirish uchun muvozanatlash shaftiga ega emas, shuningdek, MotoGPda Suzuki tomonidan o\'n yil davomida ishlatiladigan mexanik o\'zgaruvchan klapan vaqti va simli gaz bilan boshqariladigan. [6] Bu model birinchi boʻlib egilish, burilish va balandlikni oʻlchaydigan (IMU) inertial oʻlchov birligi bilan tortish nazoratini qoʻshdi, shuningdek, endi barcha yoritishlar LED bilan jihozlangan. Har qanday GSX-R uchun yana bir birinchi narsa bu modelda yonilg\'i o\'lchagichidan foydalanishdir. [7] Yangi 2017 GSX-R1000 modeli bilan bir qatorda Suzuki ham yuqori darajadagi GSX-R1000R modelini chiqardi.; ushbu R modeli Motion Track tormoz tizimi, ikki yo\'nalishli tez o\'zgartirgich va ishga tushirishni boshqarish bilan birga keladi. Shuningdek, Sport Rider xabariga ko\'ra, R modelida 2016 yilgi Kawasaki ZX-10R da standart bo\'lgan Showa Balance Free Front (BFF) vilkalari va Balance Free Rear Cushion (BFRC Lite) zarbasi mavjud . Texnik xususiyatlari 202 ot kuchi 13 200 rpm (da\'vo qilingan), 157,2 (orqa g\'ildirak), 10 000 rpm (da\'vo qilingan) da 86 lb-ft moment va 76,3 lb⋅ft (103,4 N⋅m) (orqa g\'ildirak); 76,0 mm x 55,1 mm teshik x zarba va siqish nisbati 13,2:1. [8] [9] [10] 2023-yil 1-yanvardan boshlab modelni Yevropa Ittifoqi, EFTA yoki Buyuk Britaniyada ro‘yxatdan o‘tkazish, agar u Yevro 5 ga muvofiq yangilanmasa, noqonuniy hisoblanadi . Hindistonda yangi sotuvlar allaqachon taqiqlangan, chunki u BS VI ga mos kelmaydi .</string>
    <string name="yamahaInfo">Yangilangan R6 joriy R1-dan ilhomlangan dizayn bilan yaxshilangan aerodinamika, shuningdek, uning 43 mm teskari oldingi vilkalar va old tormozlari, yangi orqa amortizator, yangi alyuminiy yonilg\'i baki, magniyli pastki ramka, ABS tormozlari, haydash rejimlari va tortish nazorati bilan jihozlangan. Yangi aerodinamika oldingi modellarga nisbatan qarshilikni 8% ga kamaytiradi. Dvigatel o\'zgarishsiz qolmoqda, orqa g\'ildiraklarning kuchi hali ham taxminan 120 ot kuchi. Moto GP Current 2005-ga o\'xshash korpus - Hozirgi YZR-M1 2017 yangilanishi OBD porti bilan birga keladi. Oldingi modellardan farqli o\'laroq, bu R6 bir xil diagnostika rejimiga ega emas. Diagnostika kodlarini olish uchun har qanday OBD-II skaneriga ulanadigan adapter sotib olishingiz kerak . Bu xato kodlarini o\'chirish uchun dileringizga murojaat qilishdan tashqari yagona yo\'ldir.Википедия site:wiki5.ru</string>
    <string name="kawasaki_ninja_h2rInfo">Yangilangan R6 joriy R1-dan ilhomlangan dizayn bilan yaxshilangan aerodinamika, shuningdek, uning 43 mm teskari oldingi vilkalar va old tormozlari, yangi orqa amortizator, yangi alyuminiy yonilg\'i baki, magniyli pastki ramka, ABS tormozlari, haydash rejimlari va tortish nazorati bilan jihozlangan. Yangi aerodinamika oldingi modellarga nisbatan qarshilikni 8% ga kamaytiradi. Dvigatel o\'zgarishsiz qolmoqda, orqa g\'ildiraklarning kuchi hali ham taxminan 120 ot kuchi. Moto GP Current 2005-ga o\'xshash korpus - Hozirgi YZR-M1 2017 yangilanishi OBD porti bilan birga keladi. Oldingi modellardan farqli o\'laroq, bu R6 bir xil diagnostika rejimiga ega emas. Diagnostika kodlarini olish uchun har qanday OBD-II skaneriga ulanadigan adapter sotib olishingiz kerak . Bu xato kodlarini o\'chirish uchun dileringizga murojaat qilishdan tashqari yagona yo\'ldir.Википедия site:wiki5.ru</string>
    <string name="suzuki_gvx_rInfo">2016-yil oxirida EICMA - da jurnalistlarga taqdim etilgan 2017-yilgi model 2009-yilda dvigatelning so‘nggi yangilanishidan keyin birinchi bo‘lib sezilarli darajada qayta ishlangan dvigatelga ega edi. Ushbu yangi dvigatel yuqori aylanish chegarasiga ega va tebranishlarni bostirish uchun muvozanatlash shaftiga ega emas, shuningdek, MotoGPda Suzuki tomonidan o\'n yil davomida ishlatiladigan mexanik o\'zgaruvchan klapan vaqti va simli gaz bilan boshqariladigan. [6] Bu model birinchi boʻlib egilish, burilish va balandlikni oʻlchaydigan (IMU) inertial oʻlchov birligi bilan tortish nazoratini qoʻshdi, shuningdek, endi barcha yoritishlar LED bilan jihozlangan. Har qanday GSX-R uchun yana bir birinchi narsa bu modelda yonilg\'i o\'lchagichidan foydalanishdir. [7] Yangi 2017 GSX-R1000 modeli bilan bir qatorda Suzuki ham yuqori darajadagi GSX-R1000R modelini chiqardi.; ushbu R modeli Motion Track tormoz tizimi, ikki yo\'nalishli tez o\'zgartirgich va ishga tushirishni boshqarish bilan birga keladi. Shuningdek, Sport Rider xabariga ko\'ra, R modelida 2016 yilgi Kawasaki ZX-10R da standart bo\'lgan Showa Balance Free Front (BFF) vilkalari va Balance Free Rear Cushion (BFRC Lite) zarbasi mavjud . Texnik xususiyatlari 202 ot kuchi 13 200 rpm (da\'vo qilingan), 157,2 (orqa g\'ildirak), 10 000 rpm (da\'vo qilingan) da 86 lb-ft moment va 76,3 lb⋅ft (103,4 N⋅m) (orqa g\'ildirak); 76,0 mm x 55,1 mm teshik x zarba va siqish nisbati 13,2:1. [8] [9] [10] 2023-yil 1-yanvardan boshlab modelni Yevropa Ittifoqi, EFTA yoki Buyuk Britaniyada ro‘yxatdan o‘tkazish, agar u Yevro 5 ga muvofiq yangilanmasa, noqonuniy hisoblanadi . Hindistonda yangi sotuvlar allaqachon taqiqlangan, chunki u BS VI ga mos kelmaydi .</string>
    <string name="cplus">C++ dasturlash tili C tiliga asoslangan. C esa o\'z navbatida B va BCPL tillaridan kelib chiqqan. BCPL 1967 yilda Martin Richards tomonidan tuzilgan va operatsion sistemalarni yozish uchun mo\'ljallangan edi. Ken Thompson o\'zining B tilida BCPL ning ko\'p hossalarini kiritgan va B da UNIX operatsion sistemasining birinchi versiyalarini yozgan. BCPL ham, B ham tipsiz til bo\'lgan. Yani o\'garuvchilarning ma\'lum bir tipi bo\'lmagan - har bir o\'zgaruvchi kompyuter hotirasida faqat bir bayt yer egallagan. O\'zgaruvchini qanday sifatda ishlatish esa, yani butun sonmi, kasrli sonmi yoki harfdekmi, dasturchi vazifasi bo\'lgan. C tilini Dennis Ritchie B dan keltirib chiqardi va uni 1972 yili ilk bor Bell Laboratoriyasida, DEC PDP-11 kompyuterida qo\'lladi. C o\'zidan oldingi B va BCPL tillarining juda ko\'p muhim tomonlarini o\'z ichiga olish bilan bir qatorda o\'zgaruvchilarni tiplashtirdi va bir qator boshqa yangiliklarni kiritdi. Boshlanishda C asosan UNIX sistemalarida keng tarqaldi. Hozirda operatsion sistemalarning asosiy qismi C/C++ da yozilmoqda. C mashina arhitekturasiga bog\'langan tildir. Lekin yahshi rejalashtirish orqali dasturlarni turli kompyuter platformalarida ishlaydigan qilsa bo\'ladi. 1983 yilda, C tili keng tarqalganligi sababli, uni standartlash harakati boshlandi. Buning uchun Amerika Milliy Standartlar Komiteti (ANSI) qoshida X3J11 tehnik komitet tuzildi. Va 1989 yilda ushbu standart qabul qilindi. Standartni dunyo bo\'yicha keng tarqatish maqsadida 1990 yilda ANSI va Dunyo Standartlar Tashkiloti (ISO) hamkorlikda C ning ANSI/ISO 9899:1990 standartini qabul qilishdi. Shu sababli C da yozilgan dasturlar kam miqdordagi o\'zgarishlar yoki umuman o\'zgarishlarsiz juda ko\'p kompyuter platformalarida ishlaydi. C++ 1980 yillar boshida Bjarne Stroustrup tomonidan C ga asoslangan tarzda tuzildi. C++ juda ko\'p qo\'shimchalarni o\'z ichiga olgan, lekin eng asosiysi u ob\'ektlar bilan dasturlashga imkon beradi. Dasturlarni tez va sifatli yozish hozirgi kunda katta ahamiyat kasb etmoda. Buni ta\'minlash uchun ob\'ektli dasturlash g\'oyasi ilgari surildi. Huddi 70-chi yillar boshida strukturali dasturlash kabi, programmalarni hayotdagi jismlarni modellashtiruvchi ob\'ektlat orqali tuzish dasturlash sohasida inqilob qildi. C++ dan tashqari boshqa ko\'p ob\'ektli dasturlshga yo\'naltirilgan tillar paydo bo\'ldi. Shulardan eng ko\'zga tashlanadigani Xerox ning Palo Altoda joylashgan ilmiy-qidiruv markazida (PARC) tuzilgan Smalltalk dasturlash tilidir. Smalltalk da hamma narsa ob\'ektlarga asoslangan. C++ esa gibrid tildir. Unda C ga o\'hshab strukturali dasturlash yoki yangicha, ob\'ektlar bilan dasturlash mumkin. Yangicha deyishimiz ham nisbiydir. Ob\'ektli dasturlash falsafasi paydo bo\'lganiga ham yigirma yildan oshayapti. C++ funksiya va ob\'ektlarning juda boy kutubhonasiga ega. Yani C++ da dasturlashni o\'rganish ikki qismga bo\'linadi. Birinchisi bu C++ ni o\'zini o\'rganish, ikkinchisi esa C++ ning standart kutubhonasidagi tayyor ob\'ekt/funksiyalarni qo\'llashni o\'rganishdir.</string>
    <string name="javaInfo">1. Java nima? Java dasturlash tili va platforma. Java yuqori darajali, mustahkam, xavfsiz va obyektga yo`naltirilgan til. Platforma: dastur bajarila oladigan ixtiyoriy apparat yoki dasturiy muhit platformadir. Javaning ham o`zini mahsus bajarilish muhiti – platformasi mavjud (JRE – Java Runtime Environment). 2. Javadan qayerda foydalaniladi? “Sun” firmasi ma`lumotiga ko`ra, 3 mlrd atrofidagi qurilmalar Javani ishlatadi (eski ma`lumot, hozir undan ko`p). Mana ulardan ba`zilari: -Shaxsiy kompyuter dasturlari (Desktop Applications) – acrobat reader, media-pleyer, antiviruslar va h.k. -Web-dasturlar -Korxona-tashkilotlar dasturlari (Enterprise Applications) – bank yoki ishlab chiqarishga oid dasturlar -Mobil dasturlar -Smart kartalar -Robotlar -O`yinlar -….. 3. Java (JavaScript tili bilan adashtirmang, bir-biriga o’xshash emas) dasturlari odatda bayt kodlarga (bytecode) kompilyatsiya qilinadi(class fayli tarzida) va bu har qanday Java platformasida ishlashini ta’minlaydi. Java platformasi apparat yoki dasturiy muhit bo`lishi mumkin. O`zbekstonda Javada bevosita ishlaydigan apparatlar kam uchraydi. Bizda JVM, ya`ni Java Virtual Machine keng tarqalgan. 4. Asosiy konsepsiyalari: Java quyidagi 5 maqsad uchun qurilgan, u shunday til bo’lishi kerakki: Oddiy, obyektga mo’ljallangan, taqsimlangan va o’rganishga oson bo’lsin. Mustahkam va xavsiz bo’lsin Qaysidir qurilma platformasidan yoki uning arxitekturasidan mustaqil bo’lsin(ya’ni qaysidir platformaga tobe bo’lmasin). Juda samarali bo’lsin. Dasturlash tili uchun tarjimon(interpreter) yozish mumkin bo’lsin. Shuningdek dasturlash tili parallel ishlashni va dinamik tiplashda foydalanishni ta’minlay olsin. 5. Dunyo bo’yicha dasturlash sohasidagi eng yetakchi hisoblangan stackoverflow.com saytini 2013-2015 yillardagi tekshiruvlariga(http://stackoverflow.com/research/developer-survey- 2015#tech-lang) ko’ra server-tomon(server side) dasturlash tillari ichida Java 1-o’rinni bermay kelmoqda. Undan tashqari o’sha saytning eng ko’p beriladigan savollar uchun foydalinadigan teglarida ham Java yetakchi o`rinlarda turibdi. 6. Javada qanaqa dasturlar yoziladi: asosan 4 tipdagi 1) Standalone applications – Linux, Mac yoki Windowsga o`rnatib, kundalik ishladatigan dasturlarimiz: mp3 pleyer, ofis, antivirus kabilar. Ular AWT, Swing yoki JavaFX texnologiyalari orqali tuziladi 2) Web Applications – tarmoq orqali ishlovchi ixtiyoriy dasturlar. Eslatma: web dasturlar ikki qismdan, server tomon hamda klient tomon (brauzer) dan iborat. Javada faqat server tomoni uchun yoziladi. Bunda servlet, jsp, jsf kabi fundamental texnologiyalardan boshlab Spring, Play kabi freymworklar qo`l keladi. Umuman olganda brauzer uchun HTML, CSS hamda Java Scriptdan boshqa tilda yozib bo`lmaydi. 3) Enterprise Applications – bu dasturlar yirik salmoqqa ega bo`lib, odatda katta jabhalarda ishlatiladi. Banklar, tashkilotlar yoki astronomiya ishlarida. Ular yuqori havfsizlik, yuklamani (nagruzka) serverlarga teng taqsimlash (load balancing) yoki klasterlash (clustering – katta tizimdan xuddi yagona obyekt sifatida foydalanish) kabi sifatlarni talab qiladi. Javada bular bor. 4) Mobile Applications – Mobil qurilmalarga mos dasturlarni ham Javada yozish mumkin. Androiddan boshlab, Java ME (JME – Java Micro Edition) gacha. JME ga misol qilib, Nokia telefonlarimiz uchun ishlangan JAR o`yinlarni misol keltirish mumkin. 7. Javaning sintaksisi C++ ga asoslangan. Shuning uchun C++ tilini biladiganlar Javani oson o`rganishadi. Lekin undagi ko`pchilik xususiyatlar olib tashlangan. Masalan: Pointer(ko`rsatkich)lar bilan to`g`ri ishlash, ya`ni Javada alohida ko`rsatkich tushunchasi yo`q. Operatorlarni qayta yuklash ham olib tashlangan. Yana eng muhimi, ishlatilmaydigan xotira (unreferenced objects) avtomatik tozalanadi. Buni Javadagi Garbage Collector (GC – chiqindi yig`ishtirgich) amalga oshiradi. C++ da bu destruktorlar orqali qo`lda (manual – ruchnoy) qilingan. Bundan tashqari Java har bir yangi versiyada bundan qulay imkoniyatlarni qo`shib kelmoqda. Ayni paytda oxirgi versiya 8-sidir. 2014-yil 18-martda ommaga e’lon qilindi. 8. JRE va JDK ni nima farqi bor? JRE – Java Runtime Environment JDK – Java Development Kit JRE bu faqat dastur bajarilishi uchun kerak bo`lgan muhit, xolos. Dasturchi bo`lmagan oddiy foydalanuvchilarga Java dasturlari bajarilishi uchun JRE yetarli. JDK = JRE + dasturlashga oid qo`shimcha instrumentlar. Bu esa dasturchilarga kerak. Formuladan ko`rinib turibdiki, JDK ning hajmi JREdan katta bo`ladi. U bir marta ko`chirib o`rnatiladi xolos. 9. Dunyoda qancha Java dasturchilar bor? Oracle kompaniyasi tahminan 9 mln desa, Wikipedia 10 mln atrofida demoqda. NumberOf.net komandasi esa 9.007.346 sonini keltirishgan. Albatta bu statistika qaysidir vaqt uchun. Ayni paytda yana o`sib bormoqda. Javada kod yozishga mo`ljallangan Eclipse (bepul) muhiti bir yilni ichida 7 mln marta ko`chirilgan. Eng mashxur web-konteynerlardan biri bo`lgan Tomcat esa oyiga o`rtacha 550 ming, yiliga esa 6.6 mln marta ko`chirilar ekan. Dunyoda qancha odam ishsiz? Ishlilarning qanchasi dasturchi? Dasturchilarning shunchasi Javachi! 10. Nima uchun aynan Javani o`rganamiz? Hozirgi kunda dasturlash tillari to`g`risidagi ayrim tortishuvlar quloqqa chalinadi. Bu til yaxshi… Yo`q, mana bunisi… Bu tilda qilingan ishni, bunisida qilib bo`lmas emish, mana bunisi eng tezi emish va hokazo. Bular xato fikrlar. Biz dasturlash tillarini imkoniyati haqida tortishayotkan bir paytda, g`arbliklar boshqa galaktikalarni o`rganib, odamni boshini boshqa tanaga ko`chirishni amallashmoqchi! Keling, bu tortishuvga bitta o`zbekona o`xshatish bilan nuqta qo`yamiz. “Lacetti yaxshi… Yo`q Nexia yo`lga zo`r… Malibu qulay va obro`li… Captiva undanam obro`li… Sparkka yetmaydi baribir va hokazo”. Sezganingizdek, bu xato tortishuv. Hammasini o`z o`rni va maqsadi bor. Dasturlash tillari ham shu kabidir. Javaning ham o`z maqsadi bor. Kerak bo`lsa, bir nechta tillardan foydalanib yagona kompleks dastur yozish mumkin.</string>
    <string name="pythonInfo">Python nima? Python - mashhur dasturlash tili. U Guido van Rossum tomonidan 1991 yilda ishlab chiqilgan. Bu dasturlash tili o\'rganish uchun oson, foydalanish uchun qulay, ko\'p qirrali dasturlash tili bo\'lib, dasturlashga yangi kirganlar uchun ham, soha mutaxassislari uchun ham zo\'r tanlov. Python quyidagilar uchun ishlatiladi: veb-ishlab chiqish (server tomonida), dasturiy ta\'minotni ishlab chiqish, matematik amallar, tizim skriptlari. Bu dasturlash tilida nimalar qilishi mumkin? Python serverda veb-ilovalar ishlab chiqish uchun ishlatilinishi mumkin. Python ish oqimlarini yaratish uchun dasturiy ta\'minot bilan bir qatorda ishlatilishi mumkin. Python ma\'lumotlar bazasi tizimlariga ulanishi mumkin. Bundan tashqari, u fayllarni o\'qishi va o\'zgartirishi mumkin. Python katta ma\'lumotlarga ishlov berish va murakkab matematikani bajarish uchun ishlatilishi mumkin. Pythonni tezkor prototiplash yoki ishlab chiqarishga tayyor dasturiy ta\'minotni ishlab chiqish uchun ishlatish mumkin. Nima uchun aynan Python? Python turli xil platformalarda ishlaydi (Windows, Mac, Linux, Raspberry Pi va boshqalar). Python ingliz tiliga o\'xshash oddiy sintaksisga ega. Python dasturlash tiliga bo\'lgan talab yildan yilga oshib kelmoqda. CodingDojo portalining tadqiqotlariga ko\'ra, 2020 yilda aynan Python tilida dasturlovchi mutaxassislarga eng ko\'p talab bo\'lgan. Python Artificial Intelligence (Sun\'iy intellekt) va Data Science (Ulkan ma\'lumotlar bilan ishlash) sohalarining tili hisoblanadi. Bugungi kunda keng ommalashib borayotgan sun\'iy intellekt asosida ishlovchi dasturlarning aksari Pythonda yozilgan. Bu sohalardagi mutaxassislar bugungi kunda eng noyob va qimmatbaho kadrlar hisoblanadi. Keng qamrovli va universal til. Python dasturlari deyarli barcha operativ tizimlarda va platformalarda ishlaydi. O\'rganish uchun ham, tushunish uchun ham juda qulay va sodda kod. Moslashuvchanlik —Python dasturlash tili ma\'lum bir masalalarni yechish bilan chegaralanmagan. Bu til dasturchilarga yangi va yangi yo\'nalishlarga ki\'rish imkonini beradi. Python quyidagi sohalarda qo\'llaniladi: Web va Internet dasturlash, kompyuter o\'yinlarini yaratish, ma\'lumotlar bazasi bilan ishlash (DB), computer vision, foydalanuvchilar uchun grafik interfeys (GUI), juda tez rivojlanayotgan buyumlar interneti (IoT) texnologiyasi va hokazo.</string>
    <string name="javaScriptInfo">Imkoniyatlari Ushbu dastur Liveware Javascript tilining avlodi boʻlib, Netscape serveri tomonidan ishlovchi vosita boʻladi. Ammo Javascript tilini mashhur qilgan narsa bu xaridor tomonidan dasturlashdir. Javascriptning asosiy vazifasi — HTML konteynerlar atributlarining qiymatlarini va koʻrsatuvchi muhitining xossalirini HTML sarlavhalarni koʻrish jarayonida foydalanuvchi tomonidan oʻzgartirish imkoniyatlarida, boshqacha aytganda ularni dinamik sarlavhalar qilish (DHTML) tushuniladi. Yana shuni aytish joizki, sarlavhalar qayta yuklanmaydi. Amalda buni, masalan, quydagicha ifodalash mumkin, sarlavhaning fonining rangini yoki hujjatdagi rasmni oʻzgartirish, yangi oyna ochish yoki ogohlantirish oynasini chiqarish. „JavaScript“ nomi Netscape kompaniyasining xususiy maxsuloti hisoblanadi. Microsoft tomonidan amalga oshirilgan til rasman Jscript deb nomlanadi. Jscript versiyalari Javascriptning mos versiyalari bilan mos keladi (aniqroq qilib aytganda oxirigacha emas). Javascript, ECMA (European Computer Manufacturers Association — Yeropa kompyuter ishlab chiqaruvchilar assotsiyatsiyasi) tomonidan standartlashtirilgan. Mos standartlar quydagicha nomlanadi: ECMA-262 va ISO-16262. Ushbu standartlar bilan Javascript 1.1ga taqriban ekvivalent ECMAScript tili aniqlanadi. Eslatish joizki, bugungi kunda Javascript ning hamma versiyalari ham ECMA standartlariga mos kelavermaydi. Mazkur kurs yoki qoʻllanmada barcha hollarda biz Javascript nomidan foydalanamiz. Xususiyatlari Javascript, bu Internet uchun katta boʻlmagan xaridor va server ilovalarni yaratishga moʻljallangan nisbatan oddiy jismga yoʻnaltirilgan til. Javascript tilida tuzilgan dasturlar HTML hujjatning ichiga joylashtirilib ular bilan birga uzatiladi. Kurish dasturlari (brauzerlar va hokazo) Netscape Navigator va Microsoft Internet Explorer hujjat matniga joylashtirilgan dasturlarni (Scriptkod) uzatishadi va bajarishadi. Shunday qilib, Javascript — interpritatorli dasturlash tili hisoblanadi. Javascriptda tuzilgan dasturlarga foydalanuvchi tomonidan kiritilayotgan maʼlumotlarni tekshirayotgan yoki hujjatni ochganda yoki yopganda biror bir amallarni bajaruvchi dasturlar misol boʻlishi mumkin. JavaScriptʼda yaratilgan dasturlarga misol sifatida foydalanuvchi tomonidan kiritilgan maʼlumotlarni tekshiruvchi, hujjatni ochish yoki yopish vaqtida qandaydir amallarni bajaruvchi dasturlarni keltirish mumkin. Bunday dasturlar foydalanuvchi tomonidan berilgan koʻrsatmalarga — sichqoncha tugmachasini bosilishiga, maʼlumotlarni ekran orqali kiritishiga yoki sichqonchani sahifa boʻylab siljitilishiga koʻra ish bajaradi. Bundan tashqari JavaScript dagi dasturlar brauzerning olzini va hujjatning atributlarini ham boshqarishi mumkin. JavaScript dasturlash tili sintaktik jihatdan Java dasturlash tiliga, jismli modellashni istisno qilgan holda, oʻxshab ketsada, lekin maʼlumotlarni statik turlari va qatʼiy tiplashtirish kabi xususiyatlarga ega boʻlmaydi. JavaScript, Java dasturlash tilidan farq qilib, sinf tushunchasi bu tilning asosiy sintaktik qurilmasi hisoblanmaydi. Bunday asos sifatida foydalanilayotgan tizim tomonidan qolllab-quvvatlanayotgan, oldindan aniqlangan maʼlumot tiplari: sonli, mantiqiy va satrli; mustaqil ham boʻlishi, jismning usuli sifatida ham ishlatilishi mumkin bollgan funksiyalar; katta sondagi uz xossalariga va usullariga ega boʻlgan hamda oldindan aniqlangan jismlardan iborat jismli model va yana dastur ichida foydalanuvchi tomonidan yangi jismlarni berish qoidalari hisoblanadi. JavaScriptʼda dasturlar yaratish uchun hech qanday qoʻshimcha vositalar kerak boʻlmaydi, faqatgina tegishli versiyadagi JavaScript qoʻllanishi mumkin boʻlgan brauzer va DHTML hujjatlarni yaratishga imkon beruvchi matn muharriri kerak boʻladi.</string>
    <string name="cSharpInfo">Kompyuter tillari oʻz-oʻzidan emas, balki oʻzaro bir-biriga bogʻliqlikda mavjud boʻladi. Har qanday yangi til u yoki bu shaklda oldingi yaratilgan tillarning xossalarini oʻziga meros qilib oladi, yaʼni ketma-ketlik prinsipi amalga oshiriladi. Natijada bitta tilning imkoniyatlari boshqalari tomonidan foydalaniladi (masalan, yangi xususiyatlar mavjud kontekstga birlashtiriladi, tilning eski tuzilishlari esa oʻchirib yuboriladi). Kompyuter tillarining evolyutsiyasi shunday tarzda roʻy beradi va dasturlash mahorati takomillashtiriladi. C# tili yuqoridagilardan istisno emas, u boshqa dasturlash tillarining koʻplab foydali imkoniyatlarini meros qilib oldi va dunyoda eng koʻp qoʻllaniladigan ikkita kompyuter tillari — Ci, C++, shuningdek Java tili bilan uzviy bogʻliqdir. C# tili 1972 yilda Nyu-Djersi shtatining Myurrey-xill shahrida Bell Laboratories kompaniyasining tizimli dastur tuzuvchisi Dennis Richie tomonidan yaratilgan. Bu til oʻzini shunchalik yaxshi koʻrsatdiki, oxir oqibatda unda Unix operatsion tizimlarining 90 % yadro kodlari yozildi (oldin quyi darajadagi til assemblerda yozilgan). C# ning vujudga kelishidan oldinroq yaratilgan tillardan, (Pascal ulardan eng mashhuri hisoblanadi), yetarli darajada muvaffaqiyatli foydalanilgan, lekin aynan C# tili dasturlashning zamonaviy davri boshlanishini belgilab berdi. 1960-yillarda dasturlash texnologiyalaridagi strukturaviy dasturlashlarning paydo boʻlishiga olib kelgan inqilobiy oʻzgarishlar C# tilini yaratish uchun asosiy imkoniyatlarni belgilab berdi. Strukturaviy dasturlashlarning paydo boʻlishiga qadar katta dasturlarni yozish qiyin boʻlgan, satr kodlari miqdorining oshishi sababli dasturlarning oʻtish joylari chalkash massalariga aylanib ketishiga olib keladi. Strukturaviy tillar dastur tuzuvchi instrumentariysiga shartli operatorlarni, lokal oʻzgaradigan tartiblarni va boshqa mukammallashtirishlarni qoʻshib bu muammoni hal qildi. Shunday tarzda nisbatan katta dasturlarni yozish imkoniyati vujudga keldi. Aynan C# tili kuch, elegantlik va maʼnodorlikni oʻzida muvaffaqiyatli birlashtirgan birinchi strukturaviy til boʻldi. Uning boʻlishi mumkin boʻlgan xatolar masʼuliyatini tilga emas dastur tuzuvchi zimmasiga yuklaydigan prinsiplar bilan inobatga olgan holda sintaksisdan foydalanishdagi qisqalik va osonlik kabi xususiyatlari tezda koʻplab tarafdorlarini topdi. Bugungi kunda biz mazkur sifatlarni oʻz oʻzidan anglashiladigan deb hisoblaymiz, lekin S da birinchi marotaba dastur tuzuvchiga zarur boʻlgan ajoyib yangi imkoniyatlar mujassamlashtirilgan. Natijada 1980 yillardan boshlab S strukturaviy dasturlash tillari orasida eng koʻp foydalaniladiganlaridan biri boʻlib qoldi. Biroq, dasturlashning rivojlantirish choralariga koʻra bundanda kattaroq dasturlarni qayta ishlash muammosi kelib chiqmoqda. Loyiha kodi maʼlum bir hajmga yetgan zahoti (uning raqamli ahamiyati dastur, dastur tuzuvchi, foydalanilgan instrumentlarga bogʻliq boʻladi, lekin taxminan 5000 satr kodlari nazarda tutilayapti) S-dasturlarini tushunish va kuzatib borishda qiyinchiliklar yuzaga keladi. OYDning vujudga kelishi va C++ tilining yaratilishi 1970 yillar oxirida koʻplab loyihalar S strukturaviy dasturlash tili yordamida qayta ishlash uchun oson boʻlgan eng yuqori hajmga erishgan. Endi bularga yangicha munosabat talab qilina boshlandi va ushbu muammoni hal etish uchun dastur tuzuvchiga katta hajmdagi dasturlar bilan ishlash imkonini beruvchi obʼektga yoʻnaltirilgan dasturlash (OYD) yaratildi. Hamonki, oʻsha vaqtda S eng ommabop til boʻlishiga qaramasdan OYD ni qoʻllab-quvvatlamadi, uning obʼektga yoʻnaltirilgan (keyinchalik C++ deb atalgan) versiyasini yaratish zarurati tugʻildi. Bu versiya oʻsha Bell Laboratories kompaniyasining xodimi Brian Straustrup tomonidan 1979 yil boshida ishlab chiqilgan. Dastlab yangi til „C sinflar bilan“ degan nom oldi, lekin 1983 yilda C++ deb qayta nomlangan. U oʻzida C tilini toʻla qamrab oladi (yaʼni, C C++ uchun poydevor boʻlib xizmat qiladi) va obʼektga yoʻnaltirilgan dasturlashni qoʻllab-quvvatlash uchun moʻljallangan yangi imkoniyatlarni namoyon qiladi. Aslida C++ C tilining obʼektga yoʻnaltirilgan versiyasi hisoblanadi, shuning uchun C ni biluvchi dastur tuzuvchi uchun C++ da dasturlashga oʻtishda yangi tilni emas, balki faqatgina OYD ning yangi konsepsiyasini oʻrganish kifoya qiladi. C++ tili uzoq vaqt mobaynida sifatga etibor bermay, faqat miqdor oshirish, hajmni kengaytirish jihatidan rivojlandi va soya ostida qolib ketdi. 1990 yillar boshida u ommaviy ravishda qoʻllanila boshlandi va katta yutuqlarga erishdi, oʻn yillikning oxirida esa dasturiy taʼminotni qayta ishlashda eng keng foydalaniladigan va bugungi kunda ham peshqadamlik qilayotgan tilga aylandi. Shuni anglash muhimki, C++ ni ishlab chiqilishi yangi dasturlash tilini yaratishga intilish hisoblanmaydi, balki faqatgina etarli darajada muvaffaqiyatli tilni takomillashtirayapti va toʻldirayapti. Bunday qarash, hozirda ham kompyuter tillarini rivojlantirishning yangi yoʻnalishlarida qoʻllanilayapti.</string>
    <string name="kotlinInfo">Kotlin - bu JVM(Java Virtual Machine) da ishlaydigan va JetBrains tomonidan ishlab chiqilgan, tipik dasturlash tili. U shuningdek, JavaScript va LLVM(Low Level Virtual Machine) infratuzilmasi orqali bir qator platformalar uchun bajariladigan kodda tuzilgan. Til Finlyandiya ko\'rfazidagi Kotlin orolining nomi bilan ataladi. Bu dasturlash tili mualliflari Java va Scala(JVM da ishlovchi dasturlash tili)ga qaraganda sodda til yaratishni maqsad qildilar. Scala bilan solishtirganda soddalashtirish, shuningdek, IDE(Integrated Development Environment)da tezroq kompilyatsiya va tilni qo\'llab-quvvatlashga olib keldi. Til Java-ga to\'liq mos keladi. Kotlin dasturlash tili java loyihalarini ishlab chiqishga va foydalanishga juda katta imkon beradi. Til sintaksisida Paskal, TypeScript, Haxe, PL / SQL, F #, Go, Scala, C ++, Java, C #, Rust va D elementlaridan foydalaniladi. O\'zgaruvchilar va parametrlarni e\'lon qilishda nomdan keyin ma\'lumotlar turlari ko\'rsatiladi (ajratuvchi - ustun). Obyektga yo\'naltirilgan yondoshishdan tashqari, Kotlin funksiyalardan foydalangan holda protsessual uslubni ham qo\'llab-quvvatlaydi. C, C ++ va D kabi, dasturga kirish nuqtasi buyruq qatorining parametrlarini o\'z ichiga oladigan main funksiya hisoblanadi. 2017-yil may oyida Google JetBrains IDE-ga asoslangan Kotlin tilidagi vositalar Android OS uchun rasmiy rivojlanish vositasi bo\'lgan Android Studio 3.0-da standartga kiritilishini e\'lon qildi. Google I/O 2019-yilda Kotlin dasturlash tili Android-ning rivojlanishida ustuvor vazifaga aylanganligini ta\'kidlab o\'tdi. Kotlinning bosh maqsadi bugungi kunda Java foydalaniladigan barcha joylarda, Javaning o’rnini bosa oladigan qisqaroq, samaraliroq, ishonchliroq muqobil bilan ta’minlashdir. Java nihoyatda mashhur til hisoblanadi va u keng miqyosdagi muhitda: Smart card dan tortib Google, Twitter, LinkedIn va boshqa internet sohasidagi kompaniyalar tomonidan yuritiladigan eng katta ma’lumot bazalarida ham foydalaniladi. Ushbu joylarning ko’pchiligida, Kotlindan foydalanish dasturchilarga kamroq asabiylashish va kamroq kod yozishlar bilan o’z maqsadlariga erishishida ko’maklashadi.</string>
    <string name="flutterInfo">Kotlin - bu JVM(Java Virtual Machine) da ishlaydigan va JetBrains tomonidan ishlab chiqilgan, tipik dasturlash tili. U shuningdek, JavaScript va LLVM(Low Level Virtual Machine) infratuzilmasi orqali bir qator platformalar uchun bajariladigan kodda tuzilgan. Til Finlyandiya ko\'rfazidagi Kotlin orolining nomi bilan ataladi. Bu dasturlash tili mualliflari Java va Scala(JVM da ishlovchi dasturlash tili)ga qaraganda sodda til yaratishni maqsad qildilar. Scala bilan solishtirganda soddalashtirish, shuningdek, IDE(Integrated Development Environment)da tezroq kompilyatsiya va tilni qo\'llab-quvvatlashga olib keldi. Til Java-ga to\'liq mos keladi. Kotlin dasturlash tili java loyihalarini ishlab chiqishga va foydalanishga juda katta imkon beradi. Til sintaksisida Paskal, TypeScript, Haxe, PL / SQL, F #, Go, Scala, C ++, Java, C #, Rust va D elementlaridan foydalaniladi. O\'zgaruvchilar va parametrlarni e\'lon qilishda nomdan keyin ma\'lumotlar turlari ko\'rsatiladi (ajratuvchi - ustun). Obyektga yo\'naltirilgan yondoshishdan tashqari, Kotlin funksiyalardan foydalangan holda protsessual uslubni ham qo\'llab-quvvatlaydi. C, C ++ va D kabi, dasturga kirish nuqtasi buyruq qatorining parametrlarini o\'z ichiga oladigan main funksiya hisoblanadi. 2017-yil may oyida Google JetBrains IDE-ga asoslangan Kotlin tilidagi vositalar Android OS uchun rasmiy rivojlanish vositasi bo\'lgan Android Studio 3.0-da standartga kiritilishini e\'lon qildi. Google I/O 2019-yilda Kotlin dasturlash tili Android-ning rivojlanishida ustuvor vazifaga aylanganligini ta\'kidlab o\'tdi. Kotlinning bosh maqsadi bugungi kunda Java foydalaniladigan barcha joylarda, Javaning o’rnini bosa oladigan qisqaroq, samaraliroq, ishonchliroq muqobil bilan ta’minlashdir. Java nihoyatda mashhur til hisoblanadi va u keng miqyosdagi muhitda: Smart card dan tortib Google, Twitter, LinkedIn va boshqa internet sohasidagi kompaniyalar tomonidan yuritiladigan eng katta ma’lumot bazalarida ham foydalaniladi. Ushbu joylarning ko’pchiligida, Kotlindan foydalanish dasturchilarga kamroq asabiylashish va kamroq kod yozishlar bilan o’z maqsadlariga erishishida ko’maklashadi.</string>
    <string name="goInfo">Google kompaniyasi o\'zining shaxsiy dasturlash tilini ishlab chiqganligi ko\'pchilikka sir emas. Bugungi kunda ushbu kompaniya texnologiya sohasida tassavur qilish mumkin bo\'lgan har qanday yo\'nalishga shiddat bilan kirib, o\'z inqiloblarini hosil qilishmoqda. Xuddi shu kabi Google kompaniyasining asosiy muloqot tili hisoblangan Go dasturlash tili 2007-yilda Robert Griesemer, Rob Pike va Ken Tompsonlar tomonidan ishlab chiqilgan bo\'lib, 2009-yilda rasman ochiq kodli dasturlash tili sifatida ommaga taqdim etilgan. To\'g\'ri u JavaScript yoki Python kabi dasturlash tillari kabi mashxur bo\'lib ulgurmagan bo\'lsada, Go dasturlash tili foydalanuvchilarga ko\'plab imkoniyatlar yaratib bera oladi. Ushbu maqolamiz davomida biz Go dasturlash tilining imkoniyatlari bilan yaqindan tanishib chiqamiz: Foydalanish uchun oson Go JavaScript yoki Pythondek ommalashmagan bo\'lsada, ularni bog\'lab turadigan bitta umumiy jihat bor: tushunish va o\'rganish juda oson. Ammo bu sintaksis yangi yaratilgan tillardan ko\'ra ko\'proq afzalliklarga ega. Sababi, uni o\'qish oson bo\'lib, bir nechta dasturchilarga bir-birlarining dastur bloklarini to\'ldirib ketish imkoniyatini taqdim etadi. Ushbu til sintaksis jihatdan C dasturlash tillariga o\'xshab ketadi. Aqlli kutubxona Go foydalanuvchilari qo\'shimcha kutubxonalarni yuklab olmasdan turib shu tilda mavjud bo\'lgan kutubxonalardan foydalangan holatda ham o\'zlariga ma\'qul bo\'lgan dasturlarni yarata oladilar. Bu Go dasturlash dunyosiga eng aqlli qo\'shimchalardan biri bo\'lib, ular sizning ma\'lumotlar bloklaringizga ma\'lumotlar tuzilmalarini qo\'shishning sodda usulini taklif etadi. Boshqa tillarda murakkab ishlashni talab qiladigan bir qator vazifalarni Go interfeysi orqali bitta qatorli kod yordamida bajarish mumkin. Googlening asosiy dasturlash tili Googlening yaqin orada biror sohaga kirmasligi qiyin masala. Shu bilan bir qatorda ushbu yaqin orada unga raqobatdosh qidiruv tizimi yuzaga chiqishi ham dargumon. Google hatto software ishlab chiqaruvchi sifatida Microsoft kompaniyasini ham chetga sura olgan kuchli kompaniya sifatida e\'tirof etiladi. Go dasturlash tili bu ularning asosiy ish quroli bo\'lib, yaqin orada ushbu til o\'z o\'rnini boshqa tilga bo\'shatib bermaydi. Demak, Go hali uzoq yillar Google kompaniyasi arxitekturasida uzoq vaqt davomida katta ro\'l o\'ynashiga amin bo\'lasiz. Aqlli hujjatlar Go - yozish va o\'qish uchun juda sodda til bo\'lsa-da, bu dasturlarni hujjatlashtirish zaruratini yo\'qqa chiqarmaydi. Barcha funksiyalar va kutubxonalarni hujjatlashtirish uchun standart qoidalar mavjud va hujjatlarni joyiga qo\'yishni unutganingizda Google tili sizni ogohlantiradi. Bu yosh dasturchilar uchun ayniqsa qimmatli narsadir, chunki ular tezkor hujjatlar bilan ishlashga odatlanib qolishadi. Yuqori darajadagi xavfsizlik Oddiy kod, odatda, murakkab koddan xavfsizroqdir va bu aynan Goga tegishli. Statik yozilgan til sifatida siz yanada dinamik tillarda mavjud bo\'lgan o\'zgaruvchan turlarning sonidan kelib chiqadigan xatolarni aniqlash qiyin va murakkab emas. Shu bilan bir qatorda unda dastur kodingizni oshib ketmasligi uchun ortiqcha kodlarni yig\'adigan maxsus xotira qutisi ham mavjuddir. Garchi generiklarning yo\'qligi kodlarni ishlatadigan testlarni sinchkovlik bilan bajarish kerakligini anglatsa-da, xatolarni aniqlash boshqa alternativalarga qaraganda osonroq va umuman toza kodni yozishda yanada yaxshiroq yondoshishga yordam beradi. Go ning asosiy kamchiligi Ushbu dasturlash tiling eng katta afzalligi bir paytning o\'zida undagi eng katta kamchilikni ham keltirib chiqaradi. Go o\'rganish uchun juda oson til bo\'lishi mumkin, lekin bu uning serqirraligiga salbiy ta\'sir keltirib chiqaradi. Dasturlash bozorida foydalaniladigan Swift va Haskell kabi murakkab tillarni o\'rganish qiyin ammo ular o\'z mavhumligi bilan dasturchilar salohiyatini oshirishga katta hissa qo\'shadilar. Bu esa dasturchilar uchun juda ahamiyatli jarayondir.</string>
    <string name="information">Bu dastur GITA da tahsil olayotgan Rustamov Zulfiqor tomonidan kursning 6- darsida uyga vazifa sifatida ishlab chiqarilgan. Xato va kamchiliklar bo\'lsa izohlarda o\'z fikringizni qoldiring</string>
</resources>